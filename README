# 📝 Simple Note-Taking App

A lightweight and minimalist web-based note-taking application built with Node.js, Express, and MongoDB. Users can add, view, and delete notes through a simple, responsive frontend interface.

---

## 🌐 Live Demo

> _Add your deployed link here (e.g., Render, Vercel, Railway). Currently not deployed._

---

## 🚀 Features

- 🧾 Add new notes with a single text input.
- 📋 View all existing notes in a clean list format.
- ❌ Delete notes with a single click.
- 💾 Persistent storage using MongoDB (local or MongoDB Atlas).
- ⚡ Simple and responsive UI with HTML, CSS, and JavaScript.
- 🌐 RESTful API for note management.

---

## 🛠️ Tech Stack

- **Backend**: Node.js, Express
- **Frontend**: HTML, CSS, JavaScript
- **Database**: MongoDB (local or MongoDB Atlas)
- **API**: RESTful routes

---

## 📋 Prerequisites

- **Node.js** (v16.20.1 or higher)
- **MongoDB** (local installation or MongoDB Atlas account)
- **npm** (Node Package Manager)

---

## 🏃‍♂️ Getting Started

Follow these steps to set up and run the app locally:

1. **Clone the Repository**:
   ```bash
npm install
MONGODB_URI=mongodb://localhost:27017/noteApp
Set Up MongoDB:
Start the Server:
Project Structure
textnote-app/
├── public/
│   ├── index.html       # Frontend HTML
│   ├── style.css        # Frontend styles
│   └── script.js        # Frontend JavaScript
├── routes/
│   └── noteRoutes.js    # API routes for notes
├── models/
│   └── Note.js          # Mongoose schema for notes
├── server.js            # Express server setup
├── package.json         # Project metadata and dependencies
├── package-lock.json    # Dependency lock file
└── README.md            # Project documentation

🛠️ API Endpoints

MethodEndpointDescriptionGET/api/notesFetch all notesPOST/api/notesCreate a new noteDELETE/api/notes/:idDelete a note by ID

🚀 Deployment
To deploy the app (e.g., on Render, Vercel, or Railway):

Set Up MongoDB Atlas:

Create a free MongoDB Atlas cluster.
Obtain the connection string and update the MONGODB_URI in your environment variables.


Deploy to a Platform:

Render:

Push the repository to GitHub.
Create a new web service on Render, link your repository, and set the start command to npm start.
Add the MONGODB_URI environment variable in Render's dashboard.


Vercel (Frontend + Serverless API):

Separate the frontend (public) and backend (server.js, routes, models) into a serverless-compatible structure.
Deploy the frontend as a static site and the backend as Vercel serverless functions.


Railway:

Similar to Render, connect your repository and configure the MONGODB_URI environment variable.




Update the Live Demo Link:

Replace the placeholder in the "Live Demo" section with your deployed URL.




📈 Future Improvements

Add input validation for note content (e.g., prevent empty notes).
Implement note editing functionality.
Add user authentication to secure notes.
Include error handling for API requests and database operations.
Add unit and integration tests (update the test script in package.json).
Enhance the UI with additional styling or features (e.g., categories, search)

Local MongoDB: Ensure MongoDB is running on mongodb://localhost:27017/noteApp.
MongoDB Atlas: Replace the connection string in server.js with your Atlas URI (e.g., mongodb+srv://<username>:<password>@cluster0.mongodb.net/noteApp).
git clone <repository-url>

   cd note-app
